<!DOCTYPE html>
<html lang="mr">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>TestZone CBT Interface</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: #f1f4f9;
      margin: 0;
      padding: 0;
    }
    .container {
      display: flex;
      height: 100vh;
    }
    .sidebar {
      width: 20%;
      background: #2d3e50;
      color: white;
      padding: 20px;
      overflow-y: auto;
    }
    .sidebar h2 {
      font-size: 18px;
    }
    .question-list button {
      width: 100%;
      margin: 5px 0;
      padding: 8px;
      background: #4c5c6e;
      border: none;
      color: white;
      cursor: pointer;
    }
    .question-list button.active {
      background: #ffc107;
      color: black;
    }
    .main {
      width: 80%;
      padding: 30px;
      overflow-y: auto;
    }
    .question-box {
      background: white;
      padding: 20px;
      border-radius: 5px;
      box-shadow: 0 0 5px rgba(0,0,0,0.1);
    }
    .question-text {
      font-size: 18px;
      font-weight: bold;
    }
    .options {
      margin-top: 15px;
    }
    .options label {
      display: block;
      margin-bottom: 10px;
    }
    .actions {
      margin-top: 20px;
    }
    .actions button {
      margin-right: 10px;
      padding: 10px 15px;
      font-size: 14px;
      cursor: pointer;
    }
    #timer {
      font-size: 16px;
      margin-bottom: 10px;
    }
  </style>
</head>
<body>

<div class="container">
  <div class="sidebar">
    <h2>‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§Ø‡§æ‡§¶‡•Ä / Question List</h2>
    <div id="timer">üïí 20:00</div>
    <div class="question-list" id="questionButtons"></div>
  </div>
  <div class="main">
    <div class="question-box">
      <div class="question-text" id="questionText"></div>
      <div class="options" id="optionsBox"></div>
      <div class="actions">
        <button onclick="prevQuestion()">Previous</button>
        <button onclick="markForReview()">Mark for Review</button>
        <button onclick="nextQuestion()">Next</button>
        <button onclick="submitTest()">Submit</button>
      </div>
    </div>
  </div>
</div>

<script>
  const questions = [
    { q: "‡§≠‡§æ‡§∞‡§§‡§æ‡§ö‡•Ä ‡§∞‡§æ‡§ú‡§ß‡§æ‡§®‡•Ä ‡§ï‡•ã‡§£‡§§‡•Ä ‡§Ü‡§π‡•á? / What is the capital of India?", o: ["‡§¶‡§ø‡§≤‡•ç‡§≤‡•Ä","‡§Æ‡•Å‡§Ç‡§¨‡§à","‡§ï‡•ã‡§≤‡§ï‡§æ‡§§‡§æ","‡§ö‡•á‡§®‡•ç‡§®‡§à"], a: 0 },
    { q: "2 + 2 ‡§ï‡§ø‡§§‡•Ä ‡§π‡•ã‡§§‡§æ‡§§? / What is 2 + 2?", o: ["3","4","5","2"], a: 1 },
    { q: "‡§™‡•É‡§•‡•ç‡§µ‡•Ä‡§µ‡§∞ ‡§ï‡§ø‡§§‡•Ä ‡§Æ‡§π‡§æ‡§¶‡•ç‡§µ‡•Ä‡§™ ‡§Ü‡§π‡•á‡§§? / How many continents?", o: ["5","6","7","8"], a: 2 },
    { q: "‡§≠‡§æ‡§∞‡§§‡§æ‡§ö‡§æ ‡§™‡§Ç‡§§‡§™‡•ç‡§∞‡§ß‡§æ‡§® ‡§ï‡•ã‡§£ ‡§Ü‡§π‡•á? / PM of India?", o: ["‡§®‡§∞‡•á‡§Ç‡§¶‡•ç‡§∞ ‡§Æ‡•ã‡§¶‡•Ä","‡§∞‡§æ‡§π‡•Å‡§≤ ‡§ó‡§æ‡§Ç‡§ß‡•Ä","‡§Ö‡§Æ‡§ø‡§§ ‡§∂‡§æ‡§π","‡§Æ‡§®‡§Æ‡•ã‡§π‡§® ‡§∏‡§ø‡§Ç‡§ó"], a: 0 },
    { q: "‡§∏‡•Ç‡§∞‡•ç‡§Ø ‡§™‡•Ç‡§∞‡•ç‡§µ‡•á‡§ï‡§°‡•Ç‡§® ‡§â‡§ó‡§µ‡§§‡•ã ‡§ï‡§æ? / Sun rises in east?", o: ["‡§π‡•ã‡§Ø","‡§®‡§æ‡§π‡•Ä","‡§ï‡§ß‡•Ä ‡§ï‡§ß‡•Ä","‡§Æ‡§æ‡§π‡§ø‡§§ ‡§®‡§æ‡§π‡•Ä"], a: 0 },
    { q: "‡§™‡§æ‡§£‡•ç‡§Ø‡§æ‡§ö‡§æ ‡§â‡§ï‡§≥‡§£‡•ç‡§Ø‡§æ‡§ö‡§æ ‡§¨‡§ø‡§Ç‡§¶‡•Ç ‡§ï‡§ø‡§§‡•Ä? / Boiling point of water?", o: ["90","100","80","70"], a: 1 },
    { q: "Traffic signal ‡§Æ‡§ß‡•ç‡§Ø‡•á '‡§•‡§æ‡§Ç‡§¨‡§æ' ‡§∞‡§Ç‡§ó? / 'Stop' signal color?", o: ["‡§π‡§ø‡§∞‡§µ‡§æ","‡§™‡§ø‡§µ‡§≥‡§æ","‡§≤‡§æ‡§≤","‡§®‡§ø‡§≥‡§æ"], a: 2 },
    { q: "‡§∏‡§Ç‡§ó‡§£‡§ï‡§æ‡§ö‡§æ ‡§∂‡•ã‡§ß? / Invented computer?", o: ["‡§ö‡§æ‡§∞‡•ç‡§≤‡•ç‡§∏ ‡§¨‡§æ‡§¨‡•á‡§ú","‡§ó‡•ç‡§∞‡§æ‡§π‡§Æ ‡§¨‡•á‡§≤","‡§®‡•ç‡§Ø‡•Ç‡§ü‡§®","‡§´‡•ç‡§≤‡•á‡§Æ‡§ø‡§Ç‡§ó"], a: 0 },
    { q: "‡§µ‡§ø‡§ú‡•á‡§ö‡§æ ‡§∂‡•ã‡§ß? / Discovered electricity?", o: ["‡§è‡§°‡§ø‡§∏‡§®","‡§¨‡•á‡§Ç‡§ú‡§æ‡§Æ‡§ø‡§® ‡§´‡•ç‡§∞‡§Å‡§ï‡§≤‡§ø‡§®","‡§Ü‡§á‡§Ç‡§∏‡•ç‡§ü‡§æ‡§á‡§®","‡§ü‡•á‡§∏‡•ç‡§≤‡§æ"], a: 1 },
    { q: "Longest river in India?", o: ["‡§ó‡§Ç‡§ó‡§æ","‡§Ø‡§Æ‡•Å‡§®‡§æ","‡§®‡§∞‡•ç‡§Æ‡§¶‡§æ","‡§ó‡•ã‡§¶‡§æ‡§µ‡§∞‡•Ä"], a: 0 },
    { q: "ATM ‡§´‡•Å‡§≤‡§´‡•â‡§∞‡•ç‡§Æ? / ATM Full Form?", o: ["Automated Teller Machine","Teller Money","Any Time Money","Type Machine"], a: 0 },
    { q: "UNICEF ‡§Æ‡•Å‡§ñ‡•ç‡§Ø‡§æ‡§≤‡§Ø? / UNICEF HQ?", o: ["New York","London","Geneva","Paris"], a: 2 },
    { q: "1 ‡§ï‡§ø‡§≤‡•ã = ? ‡§ó‡•ç‡§∞‡•Ö‡§Æ / 1 kg = ?", o: ["100","1000","500","1500"], a: 1 },
    { q: "‡§ó‡•ç‡§∞‡§π ‡§ï‡•ã‡§£‡§§‡§æ? / We live on?", o: ["‡§∂‡§®‡•Ä","‡§™‡•É‡§•‡•ç‡§µ‡•Ä","‡§Æ‡§Ç‡§ó‡§≥","‡§∏‡•Ç‡§∞‡•ç‡§Ø"], a: 1 },
    { q: "‡§§‡§æ‡§ú‡§Æ‡§π‡§æ‡§≤ ‡§ï‡•Å‡§†‡•á? / Taj Mahal located?", o: ["‡§¶‡§ø‡§≤‡•ç‡§≤‡•Ä","‡§Ü‡§ó‡•ç‡§∞‡§æ","‡§ú‡§Ø‡§™‡•Ç‡§∞","‡§™‡•Å‡§£‡•á"], a: 1 },
    { q: "‡§∂‡§ø‡§µ‡§æ‡§ú‡•Ä ‡§Æ‡§π‡§æ‡§∞‡§æ‡§ú‡§æ‡§Ç‡§ö‡§æ ‡§ú‡§®‡•ç‡§Æ? / Shivaji Birth?", o: ["‡•ß‡•´ ‡§ë‡§ó ‡•ß‡•¨‡•©‡•¶","‡•®‡•¨ ‡§ú. ‡•ß‡•¨‡•©‡•¶","‡•ß‡•Ø ‡§´‡•á‡§¨ ‡•ß‡•¨‡•©‡•¶","‡•ß‡•´ ‡§ë‡§ó ‡•ß‡•´‡•™‡•¶"], a: 2 },
    { q: "‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞‡•Ä‡§Ø ‡§™‡•ç‡§∞‡§æ‡§£‡•Ä? / National animal?", o: ["‡§∏‡§ø‡§Ç‡§π","‡§µ‡§æ‡§ò","‡§π‡§§‡•ç‡§§‡•Ä","‡§Æ‡•ã‡§∞"], a: 1 },
    { q: "ISRO ‡§Æ‡•ç‡§π‡§£‡§ú‡•á? / ISRO means?", o: ["‡§á‡§∏‡•ç‡§∞‡•ã","‡§®‡§æ‡§∏‡§æ","‡§¨‡•Ä‡§è‡§Ü‡§∞‡§∏‡•Ä","DRDO"], a: 0 },
    { q: "Earth is ___ planet?", o: ["3rd","2nd","4th","1st"], a: 0 },
    { q: "‡§∏‡•ç‡§µ‡§æ‡§§‡§Ç‡§§‡•ç‡§∞‡•ç‡§Ø ‡§¶‡§ø‡§®? / Independence Day?", o: ["15 ‡§ë‡§ó","26 ‡§ú.","1 ‡§Æ‡•á","5 ‡§∏‡§™‡•ç‡§ü‡•á‡§Ç"], a: 0 }
  ];

  let current = 0;
  let selected = Array(questions.length).fill(null);
  let review = Array(questions.length).fill(false);
  let timeLeft = 20 * 60;

  const questionText = document.getElementById("questionText");
  const optionsBox = document.getElementById("optionsBox");
  const questionButtons = document.getElementById("questionButtons");

  function renderQuestion(index) {
    questionText.innerText = questions[index].q;
    optionsBox.innerHTML = "";
    questions[index].o.forEach((opt, i) => {
      const checked = selected[index] === i ? "checked" : "";
      optionsBox.innerHTML += `<label><input type="radio" name="opt" value="${i}" ${checked}/> ${opt}</label>`;
    });
    document.querySelectorAll('input[name="opt"]').forEach(input => {
      input.onclick = () => {
        selected[current] = parseInt(input.value);
        updateButtons();
      };
    });
    updateButtons();
  }

  function updateButtons() {
    questionButtons.innerHTML = "";
    questions.forEach((q, i) => {
      let btnClass = "";
      if (i === current) btnClass = "active";
      questionButtons.innerHTML += `<button class="${btnClass}" onclick="jumpTo(${i})">${i+1}</button>`;
    });
  }

  function nextQuestion() {
    if (current < questions.length - 1) {
      current++;
      renderQuestion(current);
    }
  }

  function prevQuestion() {
    if (current > 0) {
      current--;
      renderQuestion(current);
    }
  }

  function markForReview() {
    review[current] = true;
    alert("Marked for review!");
  }

  function jumpTo(i) {
    current = i;
    renderQuestion(current);
  }

  function submitTest() {
    let score = 0;
    selected.forEach((ans, i) => {
      if (ans === questions[i].a) score++;
    });
    alert(`‡§§‡•Å‡§Æ‡§ö‡§Ç ‡§∏‡•ç‡§ï‡•ã‡§Ö‡§∞: ${score}/${questions.length}`);
  }

  function startTimer() {
    const timerEl = document.getElementById("timer");
    const interval = setInterval(() => {
      let min = Math.floor(timeLeft / 60);
      let sec = timeLeft % 60;
      timerEl.innerText = `üïí ${min}:${sec < 10 ? '0'+sec : sec}`;
      timeLeft--;
      if (timeLeft < 0) {
        clearInterval(interval);
        submitTest();
      }
    }, 1000);
  }

  renderQuestion(current);
  startTimer();
</script>

</body>
</html>
